@startuml
skinparam classAttributeIconSize 0




abstract class Product {
  # code: int
  # name: string
  # price: int
  # quantity: int
  + Product(code: int, name: string, priceCents: int, qty: int)
  + {abstract} describe(): string
  + getCode(): int
  + getPrice(): int
  + getQuantity(): int
  + getName(): string
  + reduceQuantity(): void
  + addStock(q: int): void
  + setPrice(p: int): void
}

class Snack {
  + Snack(code: int, name: string, priceCents: int, qty: int)
  + describe(): string
}

class Drink {
  - diet: bool
  + Drink(code: int, name: string, priceCents: int, qty: int, isDiet: bool)
  + describe(): string
  + isDiet(): bool
}

class Alcoholic {
  + Alcoholic(code: int, name: string, priceCents: int, qty: int, isDiet: bool)
  + describe(): string
  + requiresAgeVerification(): bool
}

Product <|-- Snack
Product <|-- Drink
Drink <|-- Alcoholic


class Payment {
  - pAmountCents: int
  - pMethod: PaymentMethod
  --
  + getAmount(): int
  + getMethod(): PaymentMethod
  + getChargedAmount(): int
}

class CRegister {
  - pBalanceCents: int
  --
  + getBalance(): int
  + addPayment(a: int): void
  + dispenseChange(a: int): int
}

class Change {
  - pChangeBreakdown: Map<int,int>
  --
  + Change(cents: int)
  + getChangeBreakdown(): Map<int,int>
}

class SalesReport {
  - pTotalSales: float
  - pItemsSold: Map<int,int>
  --
  + getTotalSales(): float
  + getItemsSold(): Map<int,int>
  + recordSale(code: int, price: float): void
  + loadFromLog(file: string): void
}

class Admin {
  - pInventory: List<Product>
  - pSalesData: SalesReport
  - pCashRegister: CRegister
  - pInventoryFile: string
  - pAdminLogFile: string
  --
  + removeItem(code: int): void
  + showSalesReport(): void
  + setItemPrice(code: int, p: int): void
  + restockItem(code: int, q: int): void
}


Admin o-- "1" CRegister
Admin o-- "1" SalesReport

Admin o-- "*" Product

' Show runtime usage dependencies
Payment ..> Change        : computes change
CRegister --> Change      : creates change
main ..> Product          : looks up by code
main ..> Payment          : constructs payment
main ..> CRegister        : addPayment/dispenseChange
main ..> Change           : uses for coin breakdown


@enduml